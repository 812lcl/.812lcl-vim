" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"             __   _  ____  _        _              _
"           //  \\/ |/__  || |  ____| |     __   __(_)_ __ ___
"           \\__//| |  / / | | / __/| |_____\ \ / /| | '_ ` _ \
"           //  \\| | / /_ | | | |_ | |_____|\ V / | | | | | | |
"           \\__//|_|/____||_| \___\|_|       \_/  |_|_| |_| |_|

"   This is the personal .vimrc.bundles file of 812lcl.
"   You can find me at http://812lcl.com
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }
" }

call plug#begin('~/.vim/bundle')
" Plugins {

    " In your .vimrc.before.local file, list only the plugin groups you will use
    " 'general', 'writing', 'programming', 'youcompleteme', 'neocomplcache', 'neocomplete',
    " 'python', 'php', 'javascript', 'html', 'ruby', 'scala', ,'haskell','go', 'misc', 'unite', 'others'
    if !exists('g:lcl_bundle_groups')
        if has('win32') || has('win64')
            let g:lcl_bundle_groups=['general', 'neocomplcache', 'programming', 'python', 'javascript', 'html', 'misc', 'unite',]
        else
            let g:lcl_bundle_groups=['general', 'youcompleteme', 'programming', 'python', 'javascript', 'html', 'misc', 'unite', 'others']
        endif
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_812lcl_bundles = 1
    if !exists("g:override_812lcl_bundles")

    " General {
        if count(g:lcl_bundle_groups, 'general')
            Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeFind' }
            Plug 'altercation/vim-colors-solarized'
            Plug 'tpope/vim-surround'
            Plug 'kien/ctrlp.vim'
            Plug 'sessionman.vim'
            "Plug 'restore_view.vim'
            Plug 'matchit.zip'
            Plug 'bling/vim-airline'
            Plug 'Lokaltog/vim-easymotion'
            Plug 'flazz/vim-colorschemes'
            Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
            Plug 'Yggdroot/indentLine'
            Plug 'gcmt/wildfire.vim'
            Plug 'kshenoy/vim-signature'
            Plug 'TaskList.vim'
        endif
    " }

    " General Programming {
        if count(g:lcl_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            Plug 'scrooloose/syntastic'
            Plug 'tpope/vim-fugitive'
            Plug 'gregsexton/gitv', { 'on': 'Gitv' }
            Plug 'mhinz/vim-signify'
            Plug 'scrooloose/nerdcommenter'
            Plug 'godlygeek/tabular'
            Plug 'majutsushi/tagbar'
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:lcl_bundle_groups, 'snipmate')
            Plug 'garbas/vim-snipmate'
            Plug 'honza/vim-snippets'
            Plug 'ervandew/supertab'
            Plug 'javacomplete'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:lcl_bundle_groups, 'youcompleteme')
            Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
            Plug 'Shougo/neocomplcache.vim'
            Plug 'JazzCore/neocomplcache-ultisnips'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
            Plug 'javacomplete'
        elseif count(g:lcl_bundle_groups, 'neocomplcache')
            Plug 'Shougo/neocomplcache.vim'
            Plug 'JazzCore/neocomplcache-ultisnips'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
            Plug 'ervandew/supertab'
            Plug 'javacomplete'
        elseif count(g:lcl_bundle_groups, 'neocomplete')
            Plug 'Shougo/neocomplete.vim.git'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
            Plug 'ervandew/supertab'
            Plug 'javacomplete'
        endif
    " }

    " Python {
        if count(g:lcl_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            Plug 'klen/python-mode', { 'on': [] }
            Plug 'yssource/python.vim', { 'on': [] }
            Plug 'python_match.vim', { 'on': [] }
            Plug 'pythoncomplete', { 'on': [] }
            Plug 'jmcantrell/vim-virtualenv', { 'on': [] }
            augroup load_python
                autocmd!
                au FileType python call plug#load('python-mode', 'python.vim', 'python_match.vim', 'pythoncomplete', 'vim-virtualenv') | autocmd! load_python
            augroup END
        endif
    " }

    " PHP {
        if count(g:lcl_bundle_groups, 'php')
            Plug 'spf13/PIV', { 'on': [] }
            Plug 'arnaud-lb/vim-php-namespace', { 'on': [] }
            Plug 'beyondwords/vim-twig', { 'on': [] }
            augroup load_php
                autocmd!
                au FileType php call plug#load('PIV', 'vim-php-namespace', 'vim-twig') | autocmd! load_php
            augroup END
        endif
    " }

    " Javascript {
        if count(g:lcl_bundle_groups, 'javascript')
            Plug 'elzr/vim-json', { 'on': [] }
            Plug 'groenewege/vim-less', { 'on': [] }
            Plug 'pangloss/vim-javascript', { 'on': [] }
            Plug 'briancollins/vim-jst', { 'on': [] }
            Plug 'kchmck/vim-coffee-script', { 'on': [] }
            augroup load_javascript
                autocmd!
                au FileType javascript call plug#load('vim-json', 'vim-less', 'vim-javascript', 'vim-jst', 'vim-coffee-script') | autocmd! load_javascript
            augroup END
        endif
    " }

    " HTML {
        if count(g:lcl_bundle_groups, 'html')
            "Plug 'amirh/HTML-AutoCloseTag', { 'on': [] }
            Plug 'hail2u/vim-css3-syntax', { 'on': [] }
            Plug 'gorodinskiy/vim-coloresque'
            Plug 'tpope/vim-haml', { 'on': [] }
            Plug 'mattn/emmet-vim', { 'on': [] }
            augroup load_html
                autocmd!
                au FileType html call plug#load('vim-css3-syntax', 'vim-haml', 'emmet-vim') | autocmd! load_html
            augroup END
        endif
    " }

    " Ruby {
        if count(g:lcl_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails', { 'on': [] }
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
            augroup load_ruby
                autocmd!
                au FileType ruby call plug#load('vim-rails') | autocmd! load_ruby
            augroup END
        endif
    " }

    " Scala {
        if count(g:lcl_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala', { 'on': [] }
            Plug 'derekwyatt/vim-sbt', { 'on': [] }
            Plug 'xptemplate', { 'on': [] }
            augroup load_scala
                autocmd!
                au FileType scala call plug#load('vim-scala', 'vim-sbt', 'xptemplate') | autocmd! load_scala
            augroup END
        endif
    " }

    " Haskell {
        if count(g:lcl_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn'
            Plug 'dag/vim2hs'
            Plug 'Twinside/vim-haskellConceal'
            Plug 'Twinside/vim-haskellFold'
            Plug 'lukerandall/haskellmode-vim'
            Plug 'eagletmt/neco-ghc'
            Plug 'eagletmt/ghcmod-vim'
            Plug 'adinapoli/cumino'
            Plug 'bitc/vim-hdevtools'
        endif
    " }

    " Go Lang {
        if count(g:lcl_bundle_groups, 'go')
            "Plug 'Blackrush/vim-gocode'
            Plug 'fatih/vim-go'
            Plug 'jstemmer/gotags'
        endif
    " }

    " Misc {
        if count(g:lcl_bundle_groups, 'misc')
            "Plug 'wting/rust.vim'
            Plug 'tpope/vim-markdown'
            "Plug 'spf13/vim-preview'
            "Plug 'tpope/vim-cucumber'
            "Plug 'cespare/vim-toml'
            "Plug 'quentindecock/vim-cucumber-align-pipes'
            "Plug 'Puppet-Syntax-Highlighting'
        endif
    " }

    " Unite {
        if count(g:lcl_bundle_groups, 'unite')
            Plug 'Shougo/unite.vim'
            Plug 'Shougo/neomru.vim'
            Plug 'Shougo/unite-outline'
            Plug 'osyo-manga/unite-quickfix'
            Plug 'ujihisa/unite-colorscheme'
            Plug 'ujihisa/unite-locate'
            Plug 'tacroe/unite-mark'
            Plug 'kmnk/vim-unite-svn'
        endif
    " }

    " Others {
        if count(g:lcl_bundle_groups, 'others')
            Plug 'Shougo/vimproc', { 'do': 'make' }
            "Plug 'mattn/webapi-vim'
            "Plug 'mattn/gist-vim'
            Plug 'christoomey/vim-tmux-navigator'
            Plug 'ianva/vim-youdao-translater'
        endif
    " }
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }
call plug#end()
