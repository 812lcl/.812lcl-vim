" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker:
"             __   _  ____  _        _               _
"           //  \\/ |/__  || |  ____| |      __   __(_)_ __ ___
"           \\__//| |  / / | | / __/| | _____\ \ / /| | '_ ` _ \
"           //  \\| | / /_ | | | |_ | ||_____|\ V / | | | | | | |
"           \\__//|_|/____||_| \___\|_|        \_/  |_|_| |_| |_|
"
"   This is the personal .vimrc.simple file of 812lcl.
"   You can find me at http://812lcl.com
" }

" Environment {

    " Identify platform {
        silent function! OSX()
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win16') || has('win32') || has('win64'))
        endfunction
    " }

    " Basics {
        set nocompatible        " Must be first line
        if !WINDOWS()
            set shell=/bin/sh
        endif
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if WINDOWS()
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
        endif
    " }

" }

" General {

    syntax on                       " 关键字上色
    syntax enable                   " 语法高亮
    filetype plugin indent on       " 必须有,打开文件类型检测

    set nu                          " 显示行号
    set nocp                        " 不兼容vi
    set hidden                      " 允许不保存切换buffer
    set splitright                  " 新分割窗口在右边
    set splitbelow                  " 新分割窗口在下边
    set autoread                    " 文件在Vim之外修改过，自动重新读入
    set timeoutlen=350              " 等待时间,如<leader>键后的输入
    set helpheight=20               " 查看帮助文档高度
    set scrolljump=1                " 当光标离开屏幕滑动行数
    set scrolloff=2                 " 保持在光标上下最少行数
    set showmatch                   " 短暂回显匹配括号
    set pastetoggle=<F8>            " 转换粘贴模式
    set hlsearch                    " 检索时高亮显示匹配项
    set incsearch                   " 边输入边搜索
    set ignorecase                  " 搜索忽略大小写
    set smartcase                   " 智能大小写搜索
    set wildmenu                    " 命令模式下补全以菜单形式显示
    set wildmode=list:longest,full  " 命令模式补全模式
    set foldenable                  " 启动折叠
    set foldmethod=marker           " 设置折叠模式
    set completeopt=longest,menuone " 关掉补全时的预览窗口
    set encoding=utf-8              " 编码，使汉语正常显示
    set termencoding=utf-8,gb18030,ucs-bom,cp936,gb2312,big5,euc-jp,euc-kr,latin1
    set fileencodings=utf-8,gb18030,ucs-bom,cp936,gb2312,big5,euc-jp,euc-kr,latin1
    set langmenu=zh_CN.UTF-8
    language message zh_CN.UTF-8

    set mouse=v                     " Automatically enable mouse usage
    set mousehide                   " Hide the mouse cursor while typing
    scriptencoding utf-8

    au BufWritePost * if getline(1) =~ "^#!/bin/[a-z]*sh" | exe "silent !chmod a+x <afile>" | endif
    au FileType vim setlocal keywordprg=:help

" }

" Vim UI {

    " GUI Settings {

        " GVIM- (here instead of .gvimrc)
        if has('gui_running')
            set guioptions-=m
            set guioptions-=T
            set guioptions-=r
            set guioptions-=L
            set mouse=a
            set lines=40
            source $VIMRUNTIME/delmenu.vim
            au GUIEnter * simalt ~x

            if !exists("g:lcl_no_big_font")
                if LINUX()
                    set guifont=Sauce\ Code\ Powerline\ 13,Consolas\ Regular\ 13,Courier\ New\ Regular\ 14
                elseif OSX()
                    set guifont=Sauce\ Code\ Powerline\ 13,Consolas\ Regular:h13,Courier\ New\ Regular:h13
                elseif WINDOWS()
                    set guifont=Sauce\ Code\ Powerline\ 13,Consolas:h13,Courier_New:h13
                endif
            endif
        else
            set t_Co=256                    " 终端显示256色
        endif

    " }

    colorscheme desert
    set background=dark
    set tabpagemax=15               " 最多15个Tab
    set showmode                    " 显示当前mode
    set cursorline                  " 高亮当前行
    set list                        " 显示特殊符号
    set listchars=tab:›\ ,trail:•,extends:❯,precedes:❮,nbsp:.

    hi clear SignColumn             " 标记列背景和主题背景匹配
    hi clear LineNr                 " 当前行列背景和主题背景匹配

    hi CursorLineNr ctermfg=red guifg=red
    hi VertSplit ctermbg=Grey ctermfg=Grey cterm=none guibg=Grey guifg=Grey
    hi Visual ctermbg=cyan ctermfg=white cterm=none guibg=cyan guifg=black
    hi Comment ctermfg=lightgrey guifg=lightgrey
    hi DiffAdd ctermbg=blue ctermfg=white guibg=blue guifg=white
    hi DiffDelete ctermbg=green ctermfg=lightgrey guibg=green
    hi DiffChange ctermbg=red ctermfg=White guibg=red guifg=White
    hi DiffText ctermbg=yellow ctermfg=lightgrey guibg=yellow guifg=black

    if has('cmdline_info')
        set showcmd                 " 右下角显示当前操作
        set ruler                   " 右下角显示状态说明
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " 设定格式
    endif

    if has('statusline')
        set laststatus=2
        set statusline=%<%f\                     " Filename
        set statusline+=%w%h%m%r                 " Options
        set statusline+=\ [%{&ff}/%Y]            " Filetype
        set statusline+=\ [%{getcwd()}]          " Current dir
        set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif

" }

" Formatting {

    set expandtab                   " tab=空格
    set tabstop=4                   " tab缩进4个空格
    set shiftwidth=4                " 自动缩进空格数
    set softtabstop=4               " 退格删除缩进
    set autoindent                  " 与前一行同样等级缩进
    set backspace=indent,eol,start  " 退格可删除缩进和原有字符
    au FileType ruby setlocal ts=2 sts=2 sw=2 et
    au FileType yaml setlocal ts=2 sts=2 sw=2 et
    au FileType html setlocal ts=2 sts=2 sw=2 et
    au FileType css setlocal ts=2 sts=2 sw=2 et
    " au FileType python setlocal textwidth=100
    au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o       " 下一行不自动添加注释
    au BufLeave * let b:winview = winsaveview()                                     " 切换buffer时保持光标所在行在窗口中到位置
    au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" }

" Key (re)Mappings {

    let mapleader=","           " 映射<leader>键,默认'\'
    let maplocalleader=" "      " 映射<localleader>键
    inoremap jj <ESC>
    vnoremap > >gv
    vnoremap < <gv
    noremap <Leader>x :lnext<CR>
    noremap <Leader>z :lpre<CR>
    noremap <Leader>p :lclose<CR>
    noremap <Leader>n ggVG
    nnoremap <silent> J :bp<CR>
    nnoremap <silent> K :bn<CR>
    vnoremap <silent> J :m '>+1<CR>gv=gv
    vnoremap <silent> K :m '<-2<CR>gv=gv
    noremap <silent><Leader>h :noh<CR>
    noremap <silent><Leader>s :set rnu! rnu?<CR>
    noremap <silent><Leader>l :set list! list?<CR>
    noremap <silent><Leader>v :set spell! spell?<CR>
    nnoremap <LocalLeader>o @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
    nnoremap <LocalLeader>j <C-w>j:q<CR>
    nnoremap <LocalLeader>; :cw<CR>
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    nnoremap <silent> <C-p> K

    " 更方便窗口间移动
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    " 命令模式按键映射
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>
    cnoremap <C-p> <Up>
    cnoremap <C-n> <Down>
    cmap w!! SudoWrite %

    " 修正易错命令
    command -bang -nargs=* Q q<bang>
    command -bang -nargs=* Wa wa<bang>
    command -bang -nargs=* WA wa<bang>
    command -bang -nargs=* -complete=file W w<bang> <args>
    command -bang -nargs=* -complete=file Wq wq<bang> <args>
    command -bang -nargs=* -complete=file WQ wq<bang> <args>

    " Markdown
    nnoremap <leader>1 m`yypVr=``
    nnoremap <leader>2 m`yypVr-``
    nnoremap <leader>3 m`^i### <esc>``4l
    nnoremap <leader>4 m`^i#### <esc>``5l
    nnoremap <leader>5 m`^i##### <esc>``6l

" }

" Plugins {

    " persistent_undo encoding {
        set nobackup noswapfile
        set history=200
        if has('persistent_undo')
            set undofile
            set undolevels=1000
            set undoreload=10000
            set undodir=~/.vim/.vimtmp/undo
        endif
        set viminfo+=n$HOME/.vim/.vimtmp/viminfo
    " }

    " Ctags {
        " Make tags placed in .git/tags file available in all levels of a repository
        let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
        if gitroot != ''
            let &tags = &tags . ',' . gitroot . '/.git/tags'
        endif
    " }

    " Cscope {
        set cscopetag
        set cscopequickfix=s-,c-,d-,i-,t-,e-   " 使用QuickFix窗口来显示cscope查找结果
        if filereadable("cscope.out")
            cs add cscope.out
        elseif filereadable("tags")
            set tags=$PWD/tags
        endif
        nmap <Leader><Leader>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>1 :cs find g<Space>
        nmap <Leader><Leader>d :cs find d <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>2 :cs find d<Space>
        nmap <Leader><Leader>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>3 :cs find c<Space>
        nmap <Leader><Leader>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>0 :cs find s<Space>
        nmap <Leader><Leader>4 :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>6 :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <Leader><Leader>7 :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <Leader><Leader>8 :cs find i <C-R>=expand("<cfile>")<CR><CR>
    " }

" }

" Functions {

    " Initialize directories {
        function! InitializeDirectories()
            let parent = $HOME
            let prefix = 'vim'
            let dir_list = {
                        \ 'backup': 'backupdir',
                        \ 'views': 'viewdir',
                        \ 'swap': 'directory' }

            if has('persistent_undo')
                let dir_list['undo'] = 'undodir'
            endif

            " To specify a different directory in which to place the vimbackup,
            " vimviews, vimundo, and vimswap files/directories, add the following to
            " your .vimrc.before.local file:
            "   let g:lcl_consolidated_directory = <full path to desired directory>
            "   eg: let g:lcl_consolidated_directory = $HOME . '/.vim/'
            if exists('g:lcl_consolidated_directory')
                let common_dir = g:lcl_consolidated_directory . prefix
            else
                let common_dir = parent . '/.vim/.vimtmp/' . prefix
            endif

            for [dirname, settingname] in items(dir_list)
                let directory = common_dir . dirname . '/'
                if exists("*mkdir")
                    if !isdirectory(directory)
                        call mkdir(directory)
                    endif
                endif
                if !isdirectory(directory)
                    echo "Warning: Unable to create backup directory: " . directory
                    echo "Try: mkdir -p " . directory
                else
                    let directory = substitute(directory, " ", "\\\\ ", "g")
                    exec "set " . settingname . "=" . directory
                endif
            endfor
        endfunction
        call InitializeDirectories()
    " }

    " Shell command {
        function! s:RunShellCommand(cmdline)
            botright new

            setlocal buftype=nofile
            setlocal bufhidden=delete
            setlocal nobuflisted
            setlocal noswapfile
            setlocal nowrap
            setlocal filetype=shell
            setlocal syntax=shell

            call setline(1, a:cmdline)
            call setline(2, substitute(a:cmdline, '.', '=', 'g'))
            execute 'silent $read !' . escape(a:cmdline, '%#')
            setlocal nomodifiable
            1
        endfunction

        command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
        " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
    " }

    " Preserve {
        function! Preserve(command)
            let _s=@/
            let l = line(".")
            let c = col(".")
            execute a:command
            let @/=_s
            call cursor(l, c)
        endfunction
        nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
        nmap _# :call Preserve("%s/\\r$//e")<CR>
        nmap _@ :retab<CR>
        nmap _% :retab<CR>:call Preserve("%s/\\r$//e")<CR>:call Preserve("%s/\\s\\+$//e")<CR>
        nmap <Leader>= :call Preserve("normal gg=G")<CR>
    " }

    " Search {
        function! s:VSetSearch()
            let temp = @s
            norm! gv"sy
            let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
            let @s = temp
        endfunction
        xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
        xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
        xnoremap <Leader>j :s@\%V@@gn<Left><Left><Left><Left>
        nnoremap <Leader>j :%s@@@gn<Left><Left><Left><Left><CR>
    " }

    " ToogleColorColumn {
        function! g:ToggleColorColumn()
            if &colorcolumn != ''
                setlocal colorcolumn&
            else
                setlocal colorcolumn=100
                hi colorcolumn ctermbg=grey guibg=grey
            endif
        endfunction
        nnoremap <LocalLeader>l :call g:ToggleColorColumn()<CR>
    " }

    " Quickfix {
        command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()     " :Qargs 提取quicklist中文件为arglist
        function! QuickfixFilenames()
          let buffer_numbers = {}
          for quickfix_item in getqflist()
            let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
          endfor
          return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
        endfunction
    " }

    " 以下function有外部依赖

    " Linesofcode {
        function! LinesOfCode()                         " 统计代码行数，需要cloc
            echo system('cloc --quiet '.bufname("%"))
        endfunction
    " }

    " Rangerchooser {
        function! RangerChooser()                       " Ranger文件管理器
            exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
            if filereadable('/tmp/chosenfile')
                exec 'edit ' . system('cat /tmp/chosenfile')
                call system('rm /tmp/chosenfile')
            endif
            redraw!
        endfunction
        map <LocalLeader>r :call RangerChooser()<CR>
    " }

" }
